"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var common_1 = require("@angular/common");
var nativescript_secure_storage_1 = require("nativescript-secure-storage");
var application_settings_1 = require("application-settings");
var store_app_service_1 = require("../../../core/services/store-app.service");
var router_2 = require("@angular/router");
var nativescript_paytm_1 = require("@nstudio/nativescript-paytm");
var StoreAppCartComponent = /** @class */ (function () {
    function StoreAppCartComponent(route, location, storeAppService, router) {
        this.route = route;
        this.location = location;
        this.storeAppService = storeAppService;
        this.router = router;
        this.orderToPaytm = {
            MID: "",
            ORDER_ID: "",
            CUST_ID: "",
            INDUSTRY_TYPE_ID: "",
            CHANNEL_ID: "",
            TXN_AMOUNT: "",
            WEBSITE: "",
            CALLBACK_URL: "",
            CHECKSUMHASH: ""
        };
        this.secureStorage = new nativescript_secure_storage_1.SecureStorage();
        this.order = new store_app_service_1.OrderModule();
    }
    StoreAppCartComponent.prototype.ngOnInit = function () {
        var full_location = this.location.path().split('/');
        this.app_id = full_location[2].trim();
        this.user_id = application_settings_1.getString('user_id');
        this.populateData();
        this.paytm = new nativescript_paytm_1.Paytm();
    };
    StoreAppCartComponent.prototype.populateData = function () {
        var _this = this;
        this.secureStorage.get({
            key: "cart"
        }).then(function (value) {
            var data = JSON.parse(value);
            console.log(data);
            if (data != null) {
                _this.all_cart_data = data;
                var filteredData = data.filter(function (x) { return x.customer_id == _this.user_id && x.app_id == _this.app_id; });
                _this.customer_cart_data = filteredData;
                _this.getTotalItemPrice();
                _this.getTotalPackingPrice();
                _this.visible_key = true;
            }
            else {
                _this.customer_cart_data = [];
            }
        });
    };
    StoreAppCartComponent.prototype.getDiscount = function (price, discounted_price) {
        return Math.floor(((price - discounted_price) * 100) / price) + '%';
    };
    StoreAppCartComponent.prototype.increment = function (i) {
        var _this = this;
        var qty = this.customer_cart_data[i].quantity;
        this.customer_cart_data[i].quantity = qty + 1;
        var index = this.all_cart_data.findIndex(function (x) { return x.customer_id == _this.user_id && x.app_id == _this.app_id && x.product_id == _this.customer_cart_data[i].product_id; });
        if (index != -1) {
            this.all_cart_data[index].quantity = qty + 1;
            this.setCartData();
        }
    };
    StoreAppCartComponent.prototype.decrement = function (i) {
        var _this = this;
        var qty = this.customer_cart_data[i].quantity;
        if (qty > 1) {
            this.customer_cart_data[i].quantity = qty - 1;
            var index = this.all_cart_data.findIndex(function (x) { return x.customer_id == _this.user_id && x.app_id == _this.app_id && x.product_id == _this.customer_cart_data[i].product_id; });
            if (index != -1) {
                this.all_cart_data[index].quantity = qty - 1;
                this.setCartData();
            }
        }
        else {
            this.remove(this.customer_cart_data[i].product_id);
        }
    };
    StoreAppCartComponent.prototype.getTotalItemPrice = function () {
        var _this = this;
        this.total_item_price = 0;
        this.customer_cart_data.forEach(function (x) {
            if (x.discounted_price > 0) {
                _this.total_item_price += (x.discounted_price * x.quantity);
            }
            else {
                _this.total_item_price += (x.price * x.quantity);
            }
        });
    };
    StoreAppCartComponent.prototype.getTotalPackingPrice = function () {
        var _this = this;
        this.total_packing_price = 0;
        this.customer_cart_data.forEach(function (x) {
            _this.total_packing_price += x.packing_charges;
        });
    };
    StoreAppCartComponent.prototype.remove = function (id) {
        var _this = this;
        var index = this.all_cart_data.findIndex(function (x) { return x.customer_id == _this.user_id && x.app_id == _this.app_id && x.product_id == id; });
        console.log(index);
        if (index != -1) {
            this.all_cart_data.splice(index, 1);
            this.customer_cart_data.splice(index, 1);
            this.setCartData();
        }
    };
    StoreAppCartComponent.prototype.setCartData = function () {
        var _this = this;
        this.secureStorage.set({
            key: 'cart',
            value: JSON.stringify(this.all_cart_data)
        }).then(function (success) {
            console.log(success);
            _this.getTotalItemPrice();
            _this.getTotalPackingPrice();
        });
    };
    StoreAppCartComponent.prototype.orderPlace = function () {
        var _this = this;
        this.order.customer = this.user_id;
        this.order.price = this.total_item_price + this.total_packing_price;
        this.order.appmaster = this.app_id;
        var details_data = new store_app_service_1.OrderDetails();
        var all_details_data = [];
        this.customer_cart_data.forEach(function (x) {
            details_data.appmaster = x.app_id;
            if (x.discounted_price > 0) {
                details_data.unit_price = x.discounted_price;
            }
            else {
                details_data.unit_price = x.price;
            }
            details_data.quantity = x.quantity;
            details_data.product = x.product_id;
            details_data.packaging_cost = x.packing_charges;
            details_data.uom = "0";
            details_data.IGST = "0";
            details_data.CGST = "0";
            all_details_data.push(details_data);
            var index = _this.all_cart_data.findIndex(function (y) { return y.customer_id == _this.user_id && y.app_id == _this.app_id && y.product_id == x.product_id; });
            if (index != -1) {
                _this.all_cart_data.splice(index, 1);
            }
        });
        this.order.order_details = all_details_data;
        this.setCartData();
        this.storeAppService.createOrder(this.order).subscribe(function (res) {
            console.log(res);
            _this.router.navigate(['/store-app/', _this.app_id, 'payment']);
        }, function (error) {
            console.log(error);
        });
        this.getPaytmFormValue(this.order.price);
    };
    StoreAppCartComponent.prototype.shop = function () {
        this.router.navigate(['/store-app/', this.app_id, 'products']);
    };
    StoreAppCartComponent.prototype.getPaytmFormValue = function (amount) {
        var _this = this;
        this.storeAppService.paytmFormValue(amount).subscribe(function (res) {
            console.log(res);
            _this.paytmFormDetails = res;
            _this.payViaPaytm();
        }, function (error) {
            console.log(error);
        });
    };
    // paytm
    StoreAppCartComponent.prototype.payViaPaytm = function () {
        this.paytm.setIOSCallbacks({
            didFinishedResponse: function (response) {
                console.log(response);
            },
            didCancelTransaction: function () {
                console.log("User cancelled transaction");
            },
            errorMissingParameterError: function (error) {
                console.log(error);
            }
        });
        this.orderToPaytm = {
            MID: this.paytmFormDetails['MID'],
            ORDER_ID: this.paytmFormDetails['ORDER_ID'],
            CUST_ID: this.paytmFormDetails['CUST_ID'],
            INDUSTRY_TYPE_ID: this.paytmFormDetails['INDUSTRY_TYPE_ID'],
            CHANNEL_ID: this.paytmFormDetails['CHANNEL_ID'],
            TXN_AMOUNT: this.paytmFormDetails['TXN_AMOUNT'],
            WEBSITE: this.paytmFormDetails['WEBSITE'],
            CALLBACK_URL: this.paytmFormDetails['CALLBACK_URL'],
            CHECKSUMHASH: this.paytmFormDetails['CHECKSUMHASH']
        };
        this.paytm.createOrder(this.orderToPaytm);
        this.paytm.initialize("STAGING");
        this.paytm.startPaymentTransaction({
            someUIErrorOccurred: function (inErrorMessage) {
                console.log(inErrorMessage);
            },
            onTransactionResponse: function (inResponse) {
                console.log(inResponse);
            },
            networkNotAvailable: function () {
                console.log("Network not available");
            },
            clientAuthenticationFailed: function (inErrorMessage) {
                console.log(inErrorMessage);
            },
            onErrorLoadingWebPage: function (iniErrorCode, inErrorMessage, inFailingUrl) {
                console.log(iniErrorCode, inErrorMessage, inFailingUrl);
            },
            onBackPressedCancelTransaction: function () {
                console.log("User cancelled transaction by pressing back button");
            },
            onTransactionCancel: function (inErrorMessage, inResponse) {
                console.log(inErrorMessage, inResponse);
            }
        });
    };
    StoreAppCartComponent = __decorate([
        core_1.Component({
            selector: "cart",
            moduleId: module.id,
            templateUrl: "./cart.component.html",
            styleUrls: ['./cart.component.css']
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute,
            common_1.Location,
            store_app_service_1.StoreAppService,
            router_2.Router])
    ], StoreAppCartComponent);
    return StoreAppCartComponent;
}());
exports.StoreAppCartComponent = StoreAppCartComponent;
//# sourceMappingURL=data:application/json;base64,