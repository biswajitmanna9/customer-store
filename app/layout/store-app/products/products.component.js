"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var store_app_service_1 = require("../../../core/services/store-app.service");
var common_1 = require("@angular/common");
var nativescript_secure_storage_1 = require("nativescript-secure-storage");
var application_settings_1 = require("application-settings");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var StoreAppProductsComponent = /** @class */ (function () {
    function StoreAppProductsComponent(route, storeAppService, location) {
        this.route = route;
        this.storeAppService = storeAppService;
        this.location = location;
        this.category_list = [];
        this.loader = new nativescript_loading_indicator_1.LoadingIndicator();
        this.lodaing_options = {
            message: 'Loading...',
            progress: 0.65,
            android: {
                indeterminate: true,
                cancelable: false,
                cancelListener: function (dialog) { console.log("Loading cancelled"); },
                max: 100,
                progressNumberFormat: "%1d/%2d",
                progressPercentFormat: 0.53,
                progressStyle: 1,
                secondaryProgress: 1
            },
            ios: {
                details: "Additional detail note!",
                margin: 10,
                dimBackground: true,
                color: "#4B9ED6",
                backgroundColor: "yellow",
                userInteractionEnabled: false,
                hideBezel: true,
            }
        };
        this.secureStorage = new nativescript_secure_storage_1.SecureStorage();
    }
    StoreAppProductsComponent.prototype.ngOnInit = function () {
        var _this = this;
        var full_location = this.location.path().split('/');
        this.app_id = full_location[2].trim();
        this.user_id = application_settings_1.getString('user_id');
        // this.secureStorage.remove({
        //     key: "cart"
        // }).then(success => console.log("Successfully removed a value? " + success));
        this.secureStorage.get({
            key: "cart"
        }).then(function (value) {
            var data = JSON.parse(value);
            console.log(data);
            if (data != null) {
                _this.customer_cart_data = data;
            }
            else {
                _this.customer_cart_data = [];
            }
            _this.getAppDetails(_this.app_id);
        });
    };
    StoreAppProductsComponent.prototype.getAppDetails = function (id) {
        var _this = this;
        this.loader.show(this.lodaing_options);
        this.storeAppService.getStoreAppDetails(id).subscribe(function (res) {
            _this.app_details = res;
            _this.category_list = _this.app_details.app_product_categories;
            // console.log(this.customer_cart_data);
            for (var i = 0; i < _this.category_list.length; i++) {
                _this.category_list[i]['items'] = JSON.parse(JSON.stringify(_this.category_list[i].products));
                // isCart implemented
                for (var j = 0; j < _this.category_list[i].items.length; j++) {
                    var index = _this.customer_cart_data.findIndex(function (y) { return y.app_id == _this.category_list[i].items[j].app_master && y.product_id == _this.category_list[i].items[j].id && y.customer_id == _this.user_id; });
                    // console.log(index)
                    if (index != -1) {
                        _this.category_list[i].items[j]['isCart'] = true;
                        _this.category_list[i].items[j]['quantity'] = _this.customer_cart_data[index].quantity;
                    }
                    else {
                        _this.category_list[i].items[j]['isCart'] = false;
                        _this.category_list[i].items[j]['quantity'] = 0;
                    }
                }
            }
            console.log(_this.category_list);
            if (_this.category_list.length > 1) {
                _this.accordian_view_key = true;
            }
            else if (_this.category_list.length == 1) {
                _this.list_view_key = true;
            }
            console.log(res);
            _this.loader.hide();
        }, function (error) {
            console.log(error);
            _this.loader.hide();
        });
    };
    StoreAppProductsComponent.prototype.addToCart = function (item) {
        var _this = this;
        var data = {
            customer_id: this.user_id,
            app_id: this.app_id,
            product_id: item.id,
            product_name: item.product_name,
            description: item.description,
            product_code: item.product_code,
            price: item.price,
            discounted_price: item.discounted_price,
            tags: item.tags,
            packing_charges: item.packing_charges,
            hide_org_price_status: item.hide_org_price_status,
            quantity: item.quantity + 1
        };
        var index = this.customer_cart_data.findIndex(function (y) { return y.app_id == _this.app_id && y.product_id == item.id && y.customer_id == _this.user_id; });
        for (var i = 0; i < this.category_list.length; i++) {
            var cat_index = this.category_list[i].items.findIndex(function (y) { return y.id == item.id && y.app_master == _this.app_id; });
            if (cat_index != -1) {
                this.category_list[i].items[cat_index].isCart = true;
                this.category_list[i].items[cat_index].quantity = item.quantity + 1;
                console.log(this.category_list);
            }
        }
        if (index == -1) {
            this.customer_cart_data.push(data);
            this.setCartData();
        }
    };
    StoreAppProductsComponent.prototype.setCartData = function () {
        this.secureStorage.set({
            key: 'cart',
            value: JSON.stringify(this.customer_cart_data)
        }).then(function (success) {
            console.log(success);
        });
    };
    StoreAppProductsComponent.prototype.decrement = function (item) {
        var _this = this;
        if (item.quantity > 1) {
            var index = this.customer_cart_data.findIndex(function (y) { return y.app_id == _this.app_id && y.product_id == item.id && y.customer_id == _this.user_id; });
            if (index != -1) {
                this.customer_cart_data[index].quantity = item.quantity - 1;
                this.setCartData();
            }
            for (var i = 0; i < this.category_list.length; i++) {
                var cat_index = this.category_list[i].items.findIndex(function (y) { return y.id == item.id && y.app_master == _this.app_id; });
                if (cat_index != -1) {
                    this.category_list[i].items[cat_index].quantity = item.quantity - 1;
                }
            }
        }
        else {
            var index = this.customer_cart_data.findIndex(function (y) { return y.app_id == _this.app_id && y.product_id == item.id && y.customer_id == _this.user_id; });
            if (index != -1) {
                this.customer_cart_data.splice(index, 1);
                this.setCartData();
            }
            for (var i = 0; i < this.category_list.length; i++) {
                var cat_index = this.category_list[i].items.findIndex(function (y) { return y.id == item.id && y.app_master == _this.app_id; });
                if (cat_index != -1) {
                    console.log("cat_index" + cat_index);
                    this.category_list[i].items[cat_index].isCart = false;
                    this.category_list[i].items[cat_index].quantity = item.quantity - 1;
                }
            }
            console.log(this.category_list);
        }
    };
    StoreAppProductsComponent.prototype.increment = function (item) {
        var _this = this;
        var index = this.customer_cart_data.findIndex(function (y) { return y.app_id == _this.app_id && y.product_id == item.id && y.customer_id == _this.user_id; });
        if (index != -1) {
            this.customer_cart_data[index].quantity = item.quantity + 1;
            this.setCartData();
        }
        for (var i = 0; i < this.category_list.length; i++) {
            var cat_index = this.category_list[i].items.findIndex(function (y) { return y.id == item.id && y.app_master == _this.app_id; });
            if (cat_index != -1) {
                this.category_list[i].items[cat_index].quantity = item.quantity + 1;
            }
        }
    };
    StoreAppProductsComponent.prototype.getDiscount = function (price, discounted_price) {
        return Math.floor(((price - discounted_price) * 100) / price) + '%';
    };
    StoreAppProductsComponent = __decorate([
        core_1.Component({
            selector: 'products',
            moduleId: module.id,
            templateUrl: "products.component.html",
            styleUrls: ["products.component.css"]
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute,
            store_app_service_1.StoreAppService,
            common_1.Location])
    ], StoreAppProductsComponent);
    return StoreAppProductsComponent;
}());
exports.StoreAppProductsComponent = StoreAppProductsComponent;
//# sourceMappingURL=data:application/json;base64,