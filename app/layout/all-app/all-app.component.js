"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Globals = require("../../core/globals");
var explore_service_1 = require("../../core/services/explore.service");
var dialogs_1 = require("nativescript-angular/directives/dialogs");
var login_modal_component_1 = require("../../core/component/login-modal/login-modal.component");
var signup_modal_component_1 = require("../../core/component/signup-modal/signup-modal.component");
var application_settings_1 = require("application-settings");
var AllAppComponent = /** @class */ (function () {
    function AllAppComponent(exploreService, modal, vcRef) {
        this.exploreService = exploreService;
        this.modal = modal;
        this.vcRef = vcRef;
        this.base_url = Globals.img_base_url;
        this.app_list = [];
        this.options = {
            context: {},
            fullscreen: false,
            viewContainerRef: this.vcRef
        };
        this.user_app_list = [];
        this.rating = [1, 2, 3, 4, 5];
        this.page = 1;
    }
    AllAppComponent.prototype.ngOnInit = function () {
        this.user_id = application_settings_1.getString('user_id');
        this.getRatedAppList();
        if (this.user_id != undefined) {
            this.getDashboardAppList();
        }
        else {
            this.getRatedAppList();
        }
    };
    AllAppComponent.prototype.getDashboardAppList = function () {
        var _this = this;
        this.exploreService.getUserDashboardAppList(this.user_id).subscribe(function (res) {
            _this.user_app_list = res['app_master'];
            console.log(res);
            _this.getRatedAppList();
        }, function (error) {
            console.log(error);
        });
    };
    AllAppComponent.prototype.getRatedAppList = function () {
        var _this = this;
        var params = '';
        params = '?page=' + this.page;
        this.exploreService.getRatedAppList(params).subscribe(function (res) {
            console.log(res);
            _this.next_page = res.next;
            if (_this.page == 1) {
                _this.app_list = [];
            }
            if (_this.user_app_list.length > 0) {
                res.results.forEach(function (x) {
                    var index = _this.user_app_list.findIndex(function (y) { return y.id == x.id; });
                    console.log(index);
                    if (index != -1) {
                        x['isDashboard'] = true;
                    }
                    else {
                        x['isDashboard'] = false;
                    }
                    x['avg_rating'] = Math.round(x['avg_rating']);
                    _this.app_list.push(x);
                });
            }
            else {
                res.results.forEach(function (x) {
                    x['isDashboard'] = false;
                    x['avg_rating'] = Math.round(x['avg_rating']);
                    _this.app_list.push(x);
                });
            }
            console.log(res);
        }, function (error) {
            console.log(error);
        });
    };
    AllAppComponent.prototype.openLoginModal = function (app_id) {
        var _this = this;
        this.modal.showModal(login_modal_component_1.LoginModalComponent, this.options).then(function (res) {
            console.log(res);
            if (res != undefined) {
                if (res.signup) {
                    _this.openSignupModal(app_id);
                }
                else if (res.success == 1) {
                    console.log(res);
                    _this.user_id = res.user_id;
                    _this.appAttachAndDisattach(app_id, _this.user_id);
                }
            }
            else {
                var index = _this.app_list.findIndex(function (x) { return x.id == app_id; });
                _this.app_list[index].isDashboard = false;
            }
        });
    };
    AllAppComponent.prototype.openSignupModal = function (app_id) {
        var _this = this;
        this.modal.showModal(signup_modal_component_1.SignUpModalComponent, this.options).then(function (res) {
            console.log(res);
            if (res != undefined) {
                if (res.signin) {
                    _this.openLoginModal(app_id);
                }
                else if (res.success == 1) {
                    _this.user_id = res.id;
                    _this.appAttachAndDisattach(app_id, _this.user_id);
                }
            }
            else {
                var index = _this.app_list.findIndex(function (x) { return x.id == app_id; });
                _this.app_list[index].isDashboard = false;
            }
        });
    };
    AllAppComponent.prototype.addToDashboard = function (app_id) {
        if (!application_settings_1.getBoolean('isLoggedin')) {
            this.openLoginModal(app_id);
        }
        else {
            this.appAttachAndDisattach(app_id, this.user_id);
        }
    };
    AllAppComponent.prototype.appAttachAndDisattach = function (app, user) {
        var index = this.app_list.findIndex(function (x) { return x.id == app; });
        if (index != -1) {
            this.app_list[index].isDashboard = !this.app_list[index].isDashboard;
            var data = {
                "customer": user,
                "app_master": app
            };
            this.exploreService.appAttachAndDisattachToDashboard(data).subscribe(function (res) {
                console.log(res);
            }, function (error) {
                console.log(error);
            });
        }
    };
    AllAppComponent.prototype.onScroll = function (e) {
        console.log(e);
        if (this.next_page != null) {
            var num_arr = this.next_page.split('=');
            var count = +num_arr[num_arr.length - 1];
            if (this.page == count - 1) {
                this.page = count;
                this.getRatedAppList();
            }
        }
    };
    AllAppComponent = __decorate([
        core_1.Component({
            selector: "dashboard",
            moduleId: module.id,
            templateUrl: "./all-app.component.html",
            styleUrls: ['./all-app.component.css']
        }),
        __metadata("design:paramtypes", [explore_service_1.ExploreService,
            dialogs_1.ModalDialogService,
            core_1.ViewContainerRef])
    ], AllAppComponent);
    return AllAppComponent;
}());
exports.AllAppComponent = AllAppComponent;
//# sourceMappingURL=data:application/json;base64,